const { Product, ProductImage, ProductCategory, Category } = require("../models");
const { Op } = require("sequelize");

exports.handleAddProduct = async (req, res) => {
  const { productName, productPrice, productDescription, productGender, productMainCategory, productSubCategory } = req.body;

  try {
    const existingProduct = await Product.findOne({
      where: {
        name: productName,
      },
    });

    if (existingProduct) {
      // Check if the existing product has the same gender
      if (existingProduct.gender === (productGender || "Unisex")) {
        return res.status(404).json({
          ok: false,
          msg: "Product with the same name and gender already exists",
        });
      }
    }

    const images = req.files; // Assuming you use 'files' for multiple file uploads

    if (!images || images.length === 0) {
      return res.status(400).json({
        ok: false,
        msg: "No images uploaded",
      });
    }

    const gender = productGender || "Unisex";

    // Create the product
    const product = await Product.create({
      name: productName,
      price: productPrice,
      description: productDescription,
      gender: gender,
    });

    console.log(req.files);
    // Handle multiple images

    // Prepare the array of objects to be inserted
    const imageObjects = images.map((image) => {
      return {
        productId: product.id,
        imageUrl: image.filename, // Using the filename generated by Multer
      };
    });

    // Use bulkCreate to insert multiple records at once
    const productImages = await ProductImage.bulkCreate(imageObjects);

    // Create ProductCategory records
    const mainCategoryInstance = await Category.findOne({
      where: { name: productMainCategory },
    });

    console.log(mainCategoryInstance);

    const subCategoryInstance = await Category.findOne({
      where: { name: productSubCategory, parentCategoryId: mainCategoryInstance.id },
    });

    if (!mainCategoryInstance || !subCategoryInstance) {
      return res.status(404).json({
        ok: false,
        msg: "Main category or subcategory not found",
      });
    }

    await ProductCategory.bulkCreate(
      [
        { productId: product.id, categoryId: mainCategoryInstance.id },
        { productId: product.id, categoryId: subCategoryInstance.id },
      ],
      {
        fields: ["productId", "categoryId"], // Specify the fields to include in the bulkCreate operation
      }
    );

    const genderCode = gender === "Men" ? "001" : gender === "Women" ? "002" : "003";
    const subCategoryId = subCategoryInstance.id < 10 ? `0${subCategoryInstance.id}` : subCategoryInstance.id;
    const sku = `${mainCategoryInstance.id}${subCategoryId}${genderCode}${product.id}`;

    // Update product with SKU using save()
    product.sku = sku;
    await product.save();

    return res.status(201).json({
      ok: true,
      msg: "Product, images, and ProductCategory records added successfully",
      product: product,
      images: productImages,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      ok: false,
      msg: "Internal server error",
    });
  }
};

exports.handleUpdateProduct = async (req, res) => {
  const { productName, productPrice, productDescription, productGender, productMainCategory, productSubCategory } = req.body;
  const { productId } = req.params;

  try {
    // Check if the product exists
    const existingProduct = await Product.findByPk(productId);

    if (!existingProduct) {
      return res.status(404).json({
        ok: false,
        msg: "Product not found",
      });
    }

    const images = req.files; // Assuming you use 'files' for multiple file uploads

    if (!images || images.length === 0) {
      return res.status(400).json({
        ok: false,
        msg: "No images uploaded",
      });
    }

    // Destroy all existing product images
    await ProductImage.destroy({
      where: {
        productId: existingProduct.id,
      },
    });

    // Update product details
    existingProduct.name = productName;
    existingProduct.price = productPrice;
    existingProduct.description = productDescription;
    existingProduct.gender = productGender || "Unisex";

    // Save the updated product
    await existingProduct.save();

    // Handle multiple images

    if (images && images.length > 0) {
      // Prepare the array of objects to be inserted
      const imageObjects = images.map((image) => {
        return {
          productId: existingProduct.id,
          imageUrl: image.filename, // Using the filename generated by Multer
        };
      });

      // Use bulkCreate to insert multiple records at once
      const productImages = await ProductImage.bulkCreate(imageObjects);
    }

    // Update product categories
    const mainCategoryInstance = await Category.findOne({
      where: { name: productMainCategory },
    });

    const subCategoryInstance = await Category.findOne({
      where: { name: productSubCategory, parentCategoryId: mainCategoryInstance.id },
    });

    if (!mainCategoryInstance || !subCategoryInstance) {
      return res.status(404).json({
        ok: false,
        msg: "Main category or subcategory not found",
      });
    }

    // Delete existing product category records
    await ProductCategory.destroy({
      where: {
        productId: existingProduct.id,
      },
    });

    // Create new product category records
    await ProductCategory.bulkCreate(
      [
        { productId: existingProduct.id, categoryId: mainCategoryInstance.id },
        { productId: existingProduct.id, categoryId: subCategoryInstance.id },
      ],
      {
        fields: ["productId", "categoryId"], // Specify the fields to include in the bulkCreate operation
      }
    );

    return res.status(200).json({
      ok: true,
      msg: "Product updated successfully",
      product: existingProduct,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      ok: false,
      msg: "Internal server error",
    });
  }
};



exports.handleGetAllProducts = async (req, res) => {
  const limit = parseInt(req.query.limit) || 100;
  const page = parseInt(req.query.page) || 1;
  const sort = req.query.sort;
  const category = req.query.category;
  const search = req.query.search;
  const filterBy = req.query.filterBy;
  const isArchived = req.query.isArchived || false; // New query parameter

  try {
    const filter = {
      where: {},
    };

    // Apply search query filter using Sequelize's Op.like
    if (search) {
      filter.where[Op.or] = [
        { name: { [Op.like]: `%${search}%` } },
        { sku: { [Op.like]: `%${search}%` } },
      ];
    }

    // Include sorting options
    if (sort) {
      if (sort === "alphabetical-asc") {
        filter.order = [["name", "ASC"]];
      } else if (sort === "alphabetical-desc") {
        filter.order = [["name", "DESC"]];
      } else if (sort === "date-asc") {
        filter.order = [["updatedAt", "ASC"]];
      } else if (sort === "date-desc") {
        filter.order = [["updatedAt", "DESC"]];
      } else if (sort === "price-asc") {
        filter.order = [["price", "ASC"]];
      } else if (sort === "price-desc") {
        filter.order = [["price", "DESC"]];
      }
    }

    if (filterBy && filterBy.toLowerCase() !== "all genders") {
      if (filterBy.toLowerCase() === "men") {
        filter.where.gender = "Men";
      } else if (filterBy.toLowerCase() === "women") {
        filter.where.gender = "Women";
      } else if (filterBy.toLowerCase() === "unisex") {
        filter.where.gender = "Unisex";
      }
    }

    // Add condition for isArchived
    if (isArchived === "true") {
      filter.where.isArchived = true;
    } else {
      filter.where.isArchived = false;
    }

    // Include category filter
    if (category && category !== "All") {
      filter.include = [
        { model: ProductImage, as: "productImages" },
        {
          model: Category,
          as: "Categories",
          through: { model: ProductCategory, attributes: [] },
          attributes: ["id", "name"],
          where: { name: category }, // Filter categories based on the queried category
        },
      ];
    } else {
      // Include without category filter
      filter.include = [
        { model: ProductImage, as: "productImages" },
        {
          model: Category,
          as: "Categories",
          through: { model: ProductCategory, attributes: [] },
          attributes: ["id", "name"],
        },
      ];
    }

    // Retrieve products without pagination to get the total count
    const totalData = await Product.count({
      ...filter,
      distinct: true, // Add this line to ensure distinct counts
      col: "id",
    });

    // Query to fetch products with primary details
    const products = await Product.findAll({
      where: filter.where,
      include: filter.include,
      order: filter.order,
      limit,
      offset: (page - 1) * limit,
    });

    if (!products || products.length === 0) {
      return res.status(404).json({
        ok: false,
        message: "No products found!",
      });
    }

    // Extract product IDs for the next query
    const productIds = products.map((product) => product.id);

    // Query to fetch all categories associated with the products
    const allCategories = await ProductCategory.findAll({
      where: { productId: productIds },
      include: [
        { model: Category, as: "Category", attributes: ["id", "name"] },
      ],
    });

    // Organize categories by product ID for efficient mapping
    const categoriesByProductId = {};
    allCategories.forEach((productCategory) => {
      const { productId, Category } = productCategory;
      if (!categoriesByProductId[productId]) {
        categoriesByProductId[productId] = [];
      }
      categoriesByProductId[productId].push(Category);
    });

    // Map categories to the corresponding products
    products.forEach((product) => {
      const productId = product.id;
      product.dataValues.categories = categoriesByProductId[productId] || [];
      delete product.dataValues.Categories; // Remove unnecessary attribute
    });

    // Send the response
    res.status(200).json({
      ok: true,
      pagination: {
        totalData,
        page,
      },
      details: products,
    });
  } catch (error) {
    console.error("Error fetching data:", error);
    res.status(500).json({
      ok: false,
      message: "Internal server error",
    });
  }
};

exports.handleUnarchiveProduct = async (req, res) => {
  const productId = req.params.productId; // Assuming you're passing the product ID in the request parameters

  try {
    // Find the product by ID
    const product = await Product.findByPk(productId);

    if (!product) {
      return res.status(404).json({
        ok: false,
        message: 'Product not found',
      });
    }

    // Update the product to mark it as unarchived
    await product.update({ isArchived: false });

    res.status(200).json({
      ok: true,
      message: 'Product unarchived successfully',
      product: product, // You can customize the response as needed
    });
  } catch (error) {
    console.error('Error unarchiving product:', error);
    res.status(500).json({
      ok: false,
      message: 'Internal server error',
    });
  }
};

exports.handleArchiveProduct = async (req, res) => {
  const productId = req.params.productId; // Assuming you're passing the product ID in the request parameters

  try {
    // Find the product by ID
    const product = await Product.findByPk(productId);

    if (!product) {
      return res.status(404).json({
        ok: false,
        message: 'Product not found',
      });
    }

    // Update the product to mark it as archived
    await product.update({ isArchived: true });

    res.status(200).json({
      ok: true,
      message: 'Product archived successfully',
      product: product, // You can customize the response as needed
    });
  } catch (error) {
    console.error('Error archiving product:', error);
    res.status(500).json({
      ok: false,
      message: 'Internal server error',
    });
  }
};
  
exports.handleDeleteProduct = async (req, res) => {
  const productId = req.params.productId;

  try {
    // Find the product by ID
    const product = await Product.findByPk(productId);

    if (!product) {
      return res.status(404).json({
        ok: false,
        message: 'Product not found',
      });
    }

    // Delete associated product images
    await ProductImage.destroy({
      where: {
        productId: product.id,
      },
    });

    // Delete associated product categories
    await ProductCategory.destroy({
      where: {
        productId: product.id,
      },
    });

    // Delete the product itself
    await product.destroy();

    res.status(200).json({
      ok: true,
      message: 'Product deleted successfully',
      product: product, // You can customize the response as needed
    });
  } catch (error) {
    console.error('Error deleting product:', error);
    res.status(500).json({
      ok: false,
      message: 'Internal server error',
    });
  }
};
